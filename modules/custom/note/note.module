<?php

use Drupal\Core\Entity\ContentEntityInterface;
use Drupal\field\Entity\FieldStorageConfig;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Entity\EntityInterface;

/**
 * Set base list value in note content
 * @param FieldStorageConfig $definition
 * @param ContentEntityInterface|NULL $entity
 * @param $cacheable
 * @return array
 */
function note_allowed_values_function(FieldStorageConfig $definition, ContentEntityInterface $entity = NULL,
                                      $cacheable) {
  $options = [
    'Actual' => 'Actual',
    'Expired' => 'Expired',
  ];
  return $options;
}

/**
 * Implements hook_ENTITY_TYPE_insert().
 */
function note_node_insert (EntityInterface $entity) {
  if($entity->bundle() == 'note') {
    $id = $entity->id();

    $query = Drupal::database()->select('node_field_data', 'node_field_data');
    $query->addField('node_field_data', 'created');
    $query->condition('vid', $id, '=');
    $dateNode = $query->execute()->fetchField();

    $dateNode = Drupal::service('date.formatter')->format($dateNode, 'html_date');
    $dateSettings = Drupal::config('node.settings')->get('date');
    if ($dateSettings >= $dateNode) {
      $status = 'Expired';
    } else {
      $status = 'Actual';
    }

    $queryA = Drupal::database()->insert('node__note_field_status');
    $queryA->fields([
      'bundle',
      'deleted',
      'entity_id',
      'revision_id',
      'langcode',
      'delta',
      'note_field_status_value'
    ]);
    $queryA->values([
      'note',
      0,
      $id,
      $id,
      'en',
      0,
      $status
    ]);
    $queryA->execute();
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function note_form_node_settings_form_alter (&$form, FormStateInterface $form_state, $form_id) {
  $form['reset']['#submit'][] = 'settings_note_reset_submit';
  $form['update']['#submit'][] = 'settings_note_update_submit';
}

/**
 * Custom submit settings reset button.
 */
function settings_note_reset_submit ($form, FormStateInterface $form_state) {
  batch_set(array(
    'operations' => [
      array('reset_status_note', array())
    ],
    'finished' => 'status_note_end',
    'title' => 'Reset status',
    )
  );
}

/**
 * Custom submit settings update button.
 */
function settings_note_update_submit ($form, FormStateInterface $form_state) {
  batch_set(array(
    'operations' => [
      array('update_status_note', array())
    ],
    'finished' => 'status_note_end',
    'title' => 'Reset status',
    )
  );
}

/**
 * Drop status filed in node__note_field_status table
 */
function reset_status_note(){
  Drupal::database()->delete('node__note_field_status')->execute();
}

/**
 * Drop status filed in node__note_field_status table and sets new value.
 */
function update_status_note(){
  Drupal::database()->delete('node__note_field_status')->execute();
  $query = Drupal::database()->select('node_field_data', 'node_field_data');
  $query->addField('node_field_data', 'nid');
  $query->condition('type', 'note', '=');
  $ids = $query->execute()->fetchCol();

  foreach ($ids as $id){

    $query = Drupal::database()->select('node_field_data', 'node_field_data');
    $query->addField('node_field_data', 'created');
    $query->condition('vid', $id, '=');
    $dateNode = $query->execute()->fetchField();

    $dateNode = Drupal::service('date.formatter')->format($dateNode, 'html_date');
    $dateSettings = Drupal::config('node.settings')->get('date');
    if($dateSettings >= $dateNode){
      $status = 'Expired';
    } else {
      $status = 'Actual';
    }

    $query = Drupal::database()->insert('node__note_field_status');
    $query->fields([
      'bundle',
      'deleted',
      'entity_id',
      'revision_id',
      'langcode',
      'delta',
      'note_field_status_value'
    ]);
    $query->values([
      'note',
      0,
      $id,
      $id,
      'en',
      0,
      $status
    ]);
    $query->execute();
  }
}

/**
 * end of batch
 */
function status_note_end(){
  drupal_set_message('Success!');
  drupal_flush_all_caches();
}